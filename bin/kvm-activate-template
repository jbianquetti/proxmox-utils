#!/usr/bin/python

import os
import re
import sys
import subprocess
import logging
import optparse
import random

from proxmox_utils import KVMUtils, ShellUtils
                    
def main():
  # ---------------------------------------------------------------
  # Option handling
  # ---------------------------------------------------------------
  usage = "usage: %prog [options] <template-name> <new_name>"
  parser = optparse.OptionParser(usage)
  
  options, args = parser.parse_args()

  if not len(args) == 2:
    parser.error("Wrong number of arguments.")
  
  # ---------------------------------------------------------------
  # Grab options
  # ---------------------------------------------------------------
  template_name = args[0]
  id_to  = args[1]

  #id_to = random.randrange(200,30000)
  
  if not id_to.isdigit():
    raise Exception("The targed id must be numeric.")

  # ---------------------------------------------------------------
  # Check paths
  # ---------------------------------------------------------------
  if not KVMUtils.tpl_exists(template_name):
    raise Exception('The virtual machine template "%s" does not exist.' % template_name)

  if KVMUtils.exists(id_to):
    raise Exception('The virtual machine "%s" already exists.' % id_to)

  # ---------------------------------------------------------------
  # Copy machine files
  # ---------------------------------------------------------------
  logging.info("Cloning machine files...")
  ShellUtils.command(["cp", "-r", KVMUtils.tpl_image_path(template_name), KVMUtils.image_path(id_to)])
  logging.info("Cloning done")
  
  # ---------------------------------------------------------------
  # Copy configuration file
  # ---------------------------------------------------------------
  logging.info("Copying configuration file...")
  ShellUtils.command(["cp", KVMUtils.tpl_config_path(template_name), KVMUtils.config_path(id_to)])
  logging.info("Copying done")

  # ---------------------------------------------------------------
  # Ask for editing of new file
  # ---------------------------------------------------------------
  #if ShellUtils.confirm("Cloning successfully. Do you want to edit the new configuration file?", True):
  #  os.system("vim %s" % KVMUtils.config_path(id_to))

  # ---------------------------------------------------------------
  # Tweaking configuration file and start machine
  # ---------------------------------------------------------------
  logging.info("Changing configuration file...")
  ShellUtils.command(['qm', 'set', '-name' , 'tsc'+id_to  ,  id_to ]  )
  ShellUtils.command(['qm', 'set', '-net0', 'virtio,bridge=vmbr0', id_to ])
  ShellUtils.command(['qm', 'set', '-virtio0', 'local:'+id_to+'/vm-102-disk-1.qcow2,size=80G', id_to ])
  ShellUtils.command(['qm', 'start', id_to ])
  logging.info("Change done")

 
if __name__ == '__main__':
  ShellUtils.configure_logging()
  main()
  exit(0)
